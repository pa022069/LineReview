[{"/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Input.js":"1","/Users/wumin/Desktop/LineBot/v1/src/features/line/Layout.js":"2","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Content.js":"3","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/CarouselItem.js":"4","/Users/wumin/Desktop/LineBot/v1/src/app/store.js":"5","/Users/wumin/Desktop/LineBot/v1/src/features/counter/counterSlice.js":"6","/Users/wumin/Desktop/LineBot/v1/src/features/line/Context.js":"7","/Users/wumin/Desktop/LineBot/v1/src/features/counter/Counter.js":"8","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Component.js":"9","/Users/wumin/Desktop/LineBot/v1/src/App.js":"10","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Reply.js":"11"},{"size":702,"mtime":1613134101779,"results":"12","hashOfConfig":"13"},{"size":4649,"mtime":1613204561399,"results":"14","hashOfConfig":"13"},{"size":877,"mtime":1613190424839,"results":"15","hashOfConfig":"13"},{"size":717,"mtime":1613149914582,"results":"16","hashOfConfig":"13"},{"size":206,"mtime":1611843772798,"results":"17","hashOfConfig":"13"},{"size":1551,"mtime":1611843772803,"results":"18","hashOfConfig":"13"},{"size":142,"mtime":1612103238982,"results":"19","hashOfConfig":"13"},{"size":1626,"mtime":1611843772800,"results":"20","hashOfConfig":"13"},{"size":1368,"mtime":1613204369487,"results":"21","hashOfConfig":"13"},{"size":243,"mtime":1612097313633,"results":"22","hashOfConfig":"13"},{"size":872,"mtime":1613204674275,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8t7y3j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Input.js",[],["50","51"],"/Users/wumin/Desktop/LineBot/v1/src/features/line/Layout.js",["52","53"],"// Author: JeffreySM.Wu\n\n// 1. DidMount -> getMessage(fetch API)\n//      1-1. msgInfo to data\n//      1-2. keywords to keyWords\n//      1-3. push first message to interFace\n\n// 2. Add Message\n//      2-1. setMessage(type = string, content)\n//      2-2. addMessage(type = string, content) => push message to interface\n//      2-3. scrollBottom\n\n// 3. Check Keywords\n//      3-1. if interFace updated => checkKeyWords(content)\n//      3-2. setGroup(content)\n//      3-3. addGroup(content) => push message to interface\n//      3-4. scrollBottom\n\nimport React, { useState, useEffect } from 'react';\nimport { Input } from './component/Input';\nimport { Content } from './component/Content';\nimport Reply from './component/Reply'\nimport { Provider } from './Context';\n\nexport const Layout = () => {\n    // 宣告\n    const [state, setState] = useState({\n        data: [],\n        interFace: [],\n        keyWords: [],\n        quickReply: []\n    })\n\n    const getMessage = () => {\n        fetch('./dist/js/step_json.json', {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then(function (response) {\n                return response.json();\n            })\n            .then(function (result) {\n                setState({\n                    ...state,\n                    data: result,\n                    interFace: result[0].msgInfo,\n                    keyWords: result[0].keywords\n                })\n            })\n    }\n\n    // Input 輸入\n    const setInput = (_value) => {\n        if (_value === '') return;\n        setMessage('input', _value);\n    }\n\n\n    const scrollBottom = () => { // 下滑置底\n        const wrapper = document.querySelector('.group');\n        return new Promise((resolve, reject) => {\n            resolve(\n                wrapper.scrollTo(0, wrapper.scrollHeight)\n            )\n        })\n    }\n    // 加入訊息\n    const addMessage = (_type, _value) => { // 加入訊息\n        return new Promise((resolve, reject) => {\n            resolve(\n                setState({\n                    ...state, interFace: state.interFace.concat({\n                        \"type\": _type,\n                        \"content\": _value\n                    })\n                })\n            )\n        })\n    }\n    const setMessage = async (_type, _value) => {\n        await addMessage(_type, _value);\n        await scrollBottom();\n    }\n\n    // 檢查關鍵字\n    const checkKeyWords = (_word) => {\n        if (typeof _word !== 'string') return;\n\n        let result = state.keyWords.find(item => item.keyword === _word)\n        if (!result) return;\n\n        let findGroup = state.data.find(item => item.msgFlag === result.msg)\n        setGroup(findGroup);\n    }\n\n    const setGroup = async (_array) => {\n        await addGroup(_array);\n        await scrollBottom();\n    }\n\n    const addGroup = (_array) => {\n        return new Promise((resolve, reject) => {\n            resolve(\n                setState({\n                    ...state,\n                    interFace: state.interFace.concat(_array.msgInfo),\n                    keyWords: _array.keywords || []\n                })\n            )\n        })\n    }\n\n    const setReply = (_content) => {\n        setState({\n            ...state,\n            quickReply: _content\n        })\n    }\n\n    const clickAction = (_action, _content) => {\n        if (_action !== \"message\") {\n            alert(_content);\n            return;\n        }\n        setMessage(\"input\", _content);\n    }\n\n    // 綁定\n    useEffect(() => {\n        getMessage();\n    }, [])\n\n    // 新增訊息時刷新\n    useEffect(() => {\n        let { interFace } = state;\n        let { length } = interFace;\n        if (!interFace[length - 1] || interFace[length - 1] < 0) return;\n        if (interFace[length - 1].type === 'text' || 'input') checkKeyWords(interFace[length - 1].content)\n        // console.log(state.interFace);\n    }, [state.interFace])\n\n    const contextValue = {\n        state,\n        setInput,\n        clickAction,\n        setReply\n    }\n\n    return (\n        <Provider value={contextValue}>\n            <div className=\"line\">\n                <img className=\"line__model\" src=\"images/frame.png\" alt=\"\" />\n                <div className=\"line__content\">\n                    <div className=\"group\">\n                        {state.interFace.map((item, idx) =>\n                            <Content key={idx} {...item} />\n                        )}\n                    </div>\n                    <Reply />\n                </div>\n                <Input />\n            </div>\n        </Provider>\n    );\n}","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Content.js",[],"/Users/wumin/Desktop/LineBot/v1/src/features/line/component/CarouselItem.js",[],"/Users/wumin/Desktop/LineBot/v1/src/app/store.js",[],["54","55"],"/Users/wumin/Desktop/LineBot/v1/src/features/counter/counterSlice.js",[],"/Users/wumin/Desktop/LineBot/v1/src/features/line/Context.js",[],"/Users/wumin/Desktop/LineBot/v1/src/features/counter/Counter.js",[],"/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Component.js",["56"],"/Users/wumin/Desktop/LineBot/v1/src/App.js",["57"],"import React from 'react';\r\nimport { Counter } from './features/counter/Counter';\r\nimport { Layout } from './features/line/Layout';\r\n\r\nfunction App() {\r\n    return (\r\n        // <Counter />\r\n        <Layout />\r\n    );\r\n}\r\nexport default App;\r\n","/Users/wumin/Desktop/LineBot/v1/src/features/line/component/Reply.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":133,"column":8,"nodeType":"64","endLine":133,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":142,"column":8,"nodeType":"64","endLine":142,"endColumn":25,"suggestions":"67"},{"ruleId":"58","replacedBy":"68"},{"ruleId":"60","replacedBy":"69"},{"ruleId":"62","severity":1,"message":"70","line":58,"column":7,"nodeType":"64","endLine":58,"endColumn":14,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":17},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessage'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has missing dependencies: 'checkKeyWords' and 'state'. Either include them or remove the dependency array.",["79"],["76"],["77"],"React Hook useEffect has a missing dependency: 'setReply'. Either include it or remove the dependency array.",["80"],"no-unused-vars","'Counter' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [getMessage]",{"range":"87","text":"88"},"Update the dependencies array to be: [checkKeyWords, state, state.interFace]",{"range":"89","text":"90"},"Update the dependencies array to be: [items, setReply]",{"range":"91","text":"92"},[3565,3567],"[getMessage]",[3906,3923],"[checkKeyWords, state, state.interFace]",[1327,1334],"[items, setReply]"]